{"version":3,"file":"index.js","sources":["../../src/modal/type.ts","../../src/modal/state.ts","../../src/modal/Box.tsx","../../src/modal/Container.tsx"],"sourcesContent":["/**\n * Modal ID Type.\n */\nexport type ModalID = string;\n\n/**\n * Modal options and callbacks.\n * This is passed from user when modal is opened,\n * and used by solid-sheets internally.\n */\nexport type ModalOptions = {\n  /** Callback for modal creation (before transition) */\n  onCreate?: () => void;\n\n  /** Callback for modal creation (after transition) */\n  onOpened?: () => void;\n\n  /**\n   * Callback for modal close. (before transition)\n   *\n   * @returns If false, cancel modal close.\n   */\n  onClose?: () => boolean;\n\n  /** Callback for modal close (after transition) */\n  onDelete?: () => void;\n};\n\n/**\n * Modal lifecycle enum.\n */\nexport enum ModalLifecycle {\n  /** Modal data is created, but not mounted */\n  Unmounted,\n  /** Modal is mounted, but open animation just started */\n  Opening,\n  /** Modal open animation is done. */\n  Opened,\n  /** Modal close animation started */\n  Closing,\n  /** Modal is closed, but not unmounted completely. */\n  Closed,\n}\n\n/**\n * Additional props for modal inner body.\n * These will pass from solid-sheets to user's component,\n * and user can use in their own components.\n */\nexport type AdditionalProps = {\n  /** Trigger modal close */\n  close: () => void;\n};\n","import { Accessor, Component, createSignal, Setter } from 'solid-js';\nimport { AdditionalProps, ModalID, ModalLifecycle, ModalOptions } from './type';\n\n/**\n * Modal data kept in the state.\n */\ntype Item<Props> = {\n  id: ModalID;\n\n  component: Component<Props & AdditionalProps>;\n  props: Props;\n  options: ModalOptions;\n\n  lc: Accessor<ModalLifecycle>;\n  setLC: Setter<ModalLifecycle>;\n};\n\nexport type Animation = {\n  keyframes: Keyframe[] | PropertyIndexedKeyframes;\n  /** Duration in seconds */\n  duration: number;\n  /** Animation easing */\n  easing: string;\n};\n\nexport type GlobalOptions<O> = {\n  animation: Animation | O;\n  zIndex: number | O;\n};\n\n/**\n * (Global) state of modals.\n * It must be attached to exactly one container,\n * where all modals should be rendered.\n */\nexport type State = {\n  nextID: number;\n  modals: Accessor<Item<any>[]>;\n  setModals: Setter<Item<any>[]>;\n} & GlobalOptions<never>;\n\n/**\n * Create global state for modal.\n */\nexport const createState = (options?: GlobalOptions<undefined>): State => {\n  const o: GlobalOptions<never> = {\n    animation: options?.animation ?? {\n      keyframes: [\n        {\n          opacity: 0,\n          transform: 'translateY(0.25rem) scale(0.9)',\n        },\n        {\n          opacity: 1,\n          transform: 'translateY(0) scale(1)',\n        },\n      ],\n      duration: 0.125,\n      easing: 'ease',\n    },\n    zIndex: options?.zIndex ?? 9999,\n  };\n  const [modals, setModals] = createSignal<Item<any>[]>([]);\n  return {\n    nextID: 0,\n    modals,\n    setModals,\n    ...o,\n  };\n};\n\n/**\n * Return the next modal ID.\n */\nconst getNextID = (state: State): ModalID => {\n  const id = state.nextID.toString(36);\n  state.nextID++;\n  return id;\n};\n\n/**\n * Find modal by ID.\n *\n * @returns undefined if not found, otherwise return modal item.\n */\nconst getModal = (state: State, id: ModalID): Item<any> | undefined => {\n  const modals = state.modals();\n  for (const i of modals) {\n    if (i.id === id) return i;\n  }\n  return;\n};\n\nexport const animate = (\n  state: State,\n  target: HTMLElement,\n  reversed: boolean,\n  callback: () => void\n) => {\n  const durationMS = 1000 * state.animation.duration;\n  target.animate(state.animation.keyframes, {\n    duration: durationMS,\n    direction: reversed ? 'reverse' : 'normal',\n    fill: 'forwards',\n    easing: state.animation.easing,\n  });\n  setTimeout(callback, durationMS);\n};\n\n/**\n * Open modal in the state.\n *\n * @returns Modal ID\n */\nexport const openModal = <T>(\n  state: State,\n  component: Component<T & AdditionalProps>,\n  props: T,\n  options?: ModalOptions\n): ModalID => {\n  const id = getNextID(state);\n  const [lc, setLC] = createSignal<ModalLifecycle>(ModalLifecycle.Unmounted);\n  const modal: Item<T> = {\n    id,\n    component,\n    props,\n    lc,\n    setLC,\n    options: options ?? {},\n  };\n  state.setModals((ms) => [...ms, modal]);\n  return id;\n};\n\n/**\n * Close a modal by ID. It'll start modal closing animation and then remove.\n *\n * @returns undefined if failed to find modal. false if rejected. true if succeed.\n */\nexport const closeModal = (state: State, id: ModalID): boolean | undefined => {\n  const i = getModal(state, id);\n  if (i === undefined) return;\n  const onClose = i.options.onClose;\n  if (onClose && onClose() === false) return false;\n  i.setLC(ModalLifecycle.Closing);\n  return true;\n};\n\n/**\n * Remove a modal by ID.\n */\nexport const deleteModal = (state: State, id: ModalID) => {\n  state.setModals((ms) => ms.filter((v) => v.id !== id));\n};\n","import {\n  Accessor,\n  Component,\n  createEffect,\n  JSX,\n  onMount,\n  Setter,\n} from 'solid-js';\nimport { closeModal, deleteModal, State, animate } from './state';\nimport { ModalID, ModalLifecycle, ModalOptions } from './type';\n\ntype Props = {\n  state: State;\n  id: ModalID;\n\n  options: ModalOptions;\n\n  lc: Accessor<ModalLifecycle>;\n  setLC: Setter<ModalLifecycle>;\n\n  children: JSX.Element | JSX.Element[];\n};\n\n/**\n * The wrapper of modal body.\n * - If outside of modal is clicked, trigger close.\n * - Place modal at proper position\n * - Manage modal's lifecycle.\n */\nconst Box: Component<Props> = (props) => {\n  let ref: HTMLDivElement;\n\n  const style: JSX.CSSProperties = {\n    position: 'absolute',\n    inset: '0',\n  };\n\n  const handleClick: JSX.EventHandler<HTMLDivElement, MouseEvent> = (e) => {\n    if (e.target === ref) {\n      closeModal(props.state, props.id);\n    }\n  };\n\n  createEffect(() => {\n    const ms = props.lc();\n    switch (ms) {\n      case ModalLifecycle.Opening:\n        props.options.onCreate?.();\n        // Set animation\n        animate(props.state, ref, false, () => {\n          props.setLC(ModalLifecycle.Opened);\n        });\n        break;\n      case ModalLifecycle.Opened:\n        props.options.onOpened?.();\n        break;\n      case ModalLifecycle.Closing:\n        animate(props.state, ref, true, () => {\n          props.setLC(ModalLifecycle.Closed);\n        });\n        break;\n      case ModalLifecycle.Closed:\n        deleteModal(props.state, props.id);\n        props.options.onDelete?.();\n        break;\n    }\n  });\n\n  onMount(() => {\n    props.setLC(ModalLifecycle.Opening);\n  });\n\n  return (\n    <div ref={ref!} class=\"modal-box\" style={style} onClick={handleClick}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Box;\n","import { Component, Show, For, JSX } from 'solid-js';\nimport { Dynamic } from 'solid-js/web';\nimport { closeModal, State } from './state';\nimport Box from './Box';\n\ntype Props = {\n  state: State;\n  class?: string;\n  style?: JSX.CSSProperties;\n};\n\n/**\n * Container of modals.\n *\n * Based on the state prop, it'll show & manager modals.\n */\nconst Container: Component<Props> = (props) => {\n  const style: JSX.CSSProperties = {\n    ...{\n      position: 'absolute',\n      inset: '0',\n      'background-color': '#0002',\n      'z-index': props.state.zIndex,\n    },\n    ...props.style,\n  };\n  return (\n    <Show when={props.state.modals().length > 0}>\n      <div class={`modal-container ${props.class}`} style={style}>\n        <For each={props.state.modals()}>\n          {(modal) => (\n            <Box\n              id={modal.id}\n              state={props.state}\n              options={modal.options}\n              lc={modal.lc}\n              setLC={modal.setLC}\n            >\n              <Dynamic\n                component={modal.component}\n                {...modal.props}\n                close={() => closeModal(props.state, modal.id)}\n              />\n            </Box>\n          )}\n        </For>\n      </div>\n    </Show>\n  );\n};\n\nexport default Container;\n"],"names":["ModalLifecycle","createState","animate","state","target","reversed","callback","durationMS","animation","duration","keyframes","direction","fill","easing","setTimeout","closeModal","id","i","getModal","modals","undefined","onClose","options","setLC","Closing","Box","props","ref","style","position","inset","handleClick","e","createEffect","lc","Opening","onCreate","Opened","onOpened","Closed","setModals","ms","filter","v","onDelete","deleteModal","onMount","_el$","_tmpl$","$$click","_ref$","_$use","use","_$style","_$insert","children","_$delegateEvents","zIndex","_$createComponent","Show","when","length","createComponent","For","each","modal","Dynamic","_$mergeProps","component","close","_$effect","_p$","_v$","class","_v$2","_$className","className","t","o","opacity","transform","createSignal","nextID","openModal","toString","getNextID","Unmounted"],"mappings":"iEA+BYA,IAAAA,WAAAA,GAAc,OAAdA,EAAAA,EAAc,UAAA,GAAA,YAAdA,EAAAA,EAAc,QAAA,GAAA,UAAdA,EAAAA,EAAc,OAAA,GAAA,SAAdA,EAAAA,EAAc,QAAA,GAAA,UAAdA,EAAAA,EAAc,OAAA,GAAA,SAAdA,CAAc,EAAA,CAAA,GCabC,MAiDAC,EAAUA,CACrBC,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAa,IAAOJ,EAAMK,UAAUC,SAC1CL,EAAOF,QAAQC,EAAMK,UAAUE,UAAW,CACxCD,SAAUF,EACVI,UAAWN,EAAW,UAAY,SAClCO,KAAM,WACNC,OAAQV,EAAMK,UAAUK,SAE1BC,WAAWR,EAAUC,EAAW,EAiCrBQ,EAAaA,CAACZ,EAAca,KACvC,MAAMC,EAvDSC,EAACf,EAAca,KAC9B,MAAMG,EAAShB,EAAMgB,SACrB,IAAK,MAAMF,KAAKE,EACd,GAAIF,EAAED,KAAOA,EAAI,OAAOC,CAE1B,EAkDUC,CAASf,EAAOa,GAC1B,QAAUI,IAANH,EAAiB,OACrB,MAAMI,EAAUJ,EAAEK,QAAQD,QAC1B,QAAIA,IAAyB,IAAdA,OACfJ,EAAEM,MAAMvB,EAAewB,UAChB,EAAI,4CCpHb,MAAMC,EAAyBC,IAC7B,IAAIC,EAEJ,MAAMC,EAA2B,CAC/BC,SAAU,WACVC,MAAO,KAGHC,EAA6DC,IAC7DA,EAAE5B,SAAWuB,GACfZ,EAAWW,EAAMvB,MAAOuB,EAAMV,GAChC,EAgCF,OA7BAiB,EAAAA,cAAa,KAEX,OADWP,EAAMQ,MAEf,KAAKlC,EAAemC,QAClBT,EAAMJ,QAAQc,aAEdlC,EAAQwB,EAAMvB,MAAOwB,GAAK,GAAO,KAC/BD,EAAMH,MAAMvB,EAAeqC,OAAO,IAEpC,MACF,KAAKrC,EAAeqC,OAClBX,EAAMJ,QAAQgB,aACd,MACF,KAAKtC,EAAewB,QAClBtB,EAAQwB,EAAMvB,MAAOwB,GAAK,GAAM,KAC9BD,EAAMH,MAAMvB,EAAeuC,OAAO,IAEpC,MACF,KAAKvC,EAAeuC,OD0FEpC,ECzFRuB,EAAMvB,MDyFgBa,ECzFTU,EAAMV,GD0FrCb,EAAMqC,WAAWC,GAAOA,EAAGC,QAAQC,GAAMA,EAAE3B,KAAOA,MCzF5CU,EAAMJ,QAAQsB,aDwFKC,IAAC1C,EAAca,CCtFtC,IAGF8B,EAAAA,SAAQ,KACNpB,EAAMH,MAAMvB,EAAemC,QAAQ,IAGrC,MAAA,IAAAY,EAAAC,IAAAD,EAAAE,QAC2DlB,EAAW,IAAAmB,EAA1DvB,EACO,MADJwB,mBAAAD,EAAAC,EAAAC,IAAAF,EAAAH,GAAHpB,EAAGoB,EAAAM,QAAAN,EAA4BnB,GAAK0B,EAAAA,OAAAP,GAC3CrB,IAAAA,EAAM6B,WAAQR,CAAA,EAFnB,EAEmB,EAKFS,EAAAA,eAAA,CAAA,2DC/DkB9B,IACnC,MAAME,EAA2B,CAE7BC,SAAU,WACVC,MAAO,IACP,mBAAoB,QACpB,UAAWJ,EAAMvB,MAAMsD,UAEtB/B,EAAME,OAEX,OAAA8B,EAAAA,gBACGC,EAAAA,KAAI,CAAA,QAACC,GAAI,OAAElC,EAAMvB,MAAMgB,SAAS0C,OAAS,CAAC,EAAA,YAAAN,GAAA,IAAAR,EAAAC,IACiB,OADjBM,SAAAP,EAAAW,EAAAI,gBAEtCC,MAAG,CAAA,QAACC,GAAI,OAAEtC,EAAMvB,MAAMgB,QAAQ,EAAAoC,SAC3BU,GAAKP,EAAAI,gBACJrC,EAAG,CAAA,MACFT,GAAE,OAAEiD,EAAMjD,EAAE,EAAA,SACZb,GAAK,OAAEuB,EAAMvB,KAAK,EAAA,WAClBmB,GAAO,OAAE2C,EAAM3C,OAAO,EAAA,MACtBY,GAAE,OAAE+B,EAAM/B,EAAE,EAAA,SACZX,GAAK,OAAE0C,EAAM1C,KAAK,EAAA,YAAAgC,GAAA,OAAAG,EAAAI,gBAEjBI,EAAOA,QAAAC,aAAA,CAAA,aACNC,GAAS,OAAEH,EAAMG,SAAS,IACtBH,IAAAA,EAAMvC,OAAK,CACf2C,MAAOA,IAAMtD,EAAWW,EAAMvB,MAAO8D,EAAMjD,MAAG,OAGnDsD,EAAAA,QAAAC,IAAA,IAAAC,EAhBQ,mBAAkB9C,EAAM+C,QAAOC,EAAS9C,EAAK,OAAA4C,IAAAD,EAAAvC,GAAA2C,EAAAC,UAAA7B,EAAAwB,EAAAvC,EAAAwC,GAAAD,EAAAM,EAAAxB,QAAAN,EAAA2B,EAAAH,EAAAM,GAAAN,CAAA,GAAA,CAAAvC,OAAAZ,EAAAyD,OAAAzD,IAAA2B,CAAA,GAAA,gDFgBpCzB,IAC1B,MAAMwD,EAA0B,CAC9BtE,UAAWc,GAASd,WAAa,CAC/BE,UAAW,CACT,CACEqE,QAAS,EACTC,UAAW,kCAEb,CACED,QAAS,EACTC,UAAW,2BAGfvE,SAAU,KACVI,OAAQ,QAEV4C,OAAQnC,GAASmC,QAAU,OAEtBtC,EAAQqB,GAAayC,EAAYA,aAAc,IACtD,MAAO,CACLC,OAAQ,EACR/D,SACAqB,eACGsC,EACJ,oBA8CsBK,CACvBhF,EACAiE,EACA1C,EACAJ,KAEA,MAAMN,EA9CWb,KACjB,MAAMa,EAAKb,EAAM+E,OAAOE,SAAS,IAEjC,OADAjF,EAAM+E,SACClE,CAAE,EA2CEqE,CAAUlF,IACd+B,EAAIX,GAAS0D,EAAAA,aAA6BjF,EAAesF,WAC1DrB,EAAiB,CACrBjD,KACAoD,YACA1C,QACAQ,KACAX,QACAD,QAASA,GAAW,CAAC,GAGvB,OADAnB,EAAMqC,WAAWC,GAAO,IAAIA,EAAIwB,KACzBjD,CAAE"}